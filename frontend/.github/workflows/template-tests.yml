name: DMCA Templates Test Suite

on:
  push:
    branches: [main, develop]
    paths: 
      - 'frontend/src/components/templates/**'
      - 'frontend/src/types/templates.ts'
      - 'frontend/src/services/dmcaTemplateValidator.ts'
      - 'frontend/e2e/template-workflows.spec.ts'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/src/components/templates/**'
      - 'frontend/src/types/templates.ts'
      - 'frontend/src/services/dmcaTemplateValidator.ts'
      - 'frontend/e2e/template-workflows.spec.ts'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Lint test files
        run: |
          cd frontend
          npx eslint 'src/components/templates/__tests__/**/*.{ts,tsx}' --format=json --output-file=lint-results.json
        continue-on-error: true

      - name: Run unit tests with coverage
        run: |
          cd frontend
          npm run test:templates:coverage -- --reporter=junit --outputFile=test-results/unit-results.xml

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: |
            frontend/test-results/unit-results.xml
            frontend/coverage/
            frontend/lint-results.json

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: frontend/coverage/lcov.info

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Install Node dependencies
        run: |
          cd frontend
          npm ci

      - name: Start mock backend
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run integration tests
        run: |
          cd frontend
          npm run test:integration -- --reporter=junit --outputFile=test-results/integration-results.xml

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: frontend/test-results/integration-results.xml

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Install Playwright browsers
        run: |
          cd frontend
          npx playwright install --with-deps

      - name: Start application
        run: |
          cd frontend
          npm run dev &
          sleep 15

      - name: Run Playwright tests
        run: |
          cd frontend
          npm run e2e:templates -- --reporter=junit --outputFile=test-results/e2e-results.xml

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/test-results/e2e-results.xml
            frontend/playwright-report/
            frontend/test-results/

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:accessibility -- --reporter=junit --outputFile=test-results/accessibility-results.xml

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: frontend/test-results/accessibility-results.xml

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run performance tests
        run: |
          cd frontend
          npm run test:performance -- --reporter=junit --outputFile=test-results/performance-results.xml

      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: frontend/test-results/performance-results.xml

  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, accessibility-tests, performance-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install test report dependencies
        run: |
          npm install -g junit-report-merger
          npm install -g junit2html

      - name: Merge test results
        run: |
          mkdir -p consolidated-results
          
          # Merge all JUnit XML files
          junit-report-merger \
            test-artifacts/unit-test-results/unit-results.xml \
            test-artifacts/integration-test-results/integration-results.xml \
            test-artifacts/e2e-test-results/e2e-results.xml \
            test-artifacts/accessibility-test-results/accessibility-results.xml \
            test-artifacts/performance-test-results/performance-results.xml \
            -o consolidated-results/all-results.xml

      - name: Generate HTML report
        run: |
          junit2html consolidated-results/all-results.xml consolidated-results/test-report.html

      - name: Generate test summary
        run: |
          cat > consolidated-results/test-summary.md << 'EOF'
          # DMCA Templates Test Summary
          
          ## Test Results Overview
          
          This report contains the results of comprehensive testing for the DMCA Templates UI implementation.
          
          ### Test Categories Executed:
          
          1. **Unit Tests** - Component-level testing with mocking
          2. **Integration Tests** - API integration and data flow testing  
          3. **End-to-End Tests** - Complete user workflow testing
          4. **Accessibility Tests** - WCAG compliance and screen reader support
          5. **Performance Tests** - Load testing and optimization validation
          
          ### Coverage Requirements:
          
          - **Functions**: 80% minimum
          - **Statements**: 80% minimum  
          - **Branches**: 80% minimum
          - **Lines**: 80% minimum
          
          ### Key Focus Areas Tested:
          
          - Template Library Dashboard functionality
          - Template Creation Wizard workflow
          - Enhanced Template Editor features
          - Real-time preview and validation
          - Search, filtering, and pagination
          - Bulk operations and management
          - Responsive design and mobile support
          - Keyboard navigation and accessibility
          - Error handling and edge cases
          - Performance under load
          
          See attached JUnit XML and HTML reports for detailed results.
          EOF

      - name: Upload consolidated test report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: consolidated-results/

      - name: Comment test summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('consolidated-results/test-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Fail if critical tests failed
        if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure'
        run: exit 1