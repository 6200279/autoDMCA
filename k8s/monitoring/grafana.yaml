apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus:9090
      isDefault: true
      editable: true
    - name: Loki
      type: loki
      access: proxy
      url: http://loki:3100
      editable: true
    - name: CloudWatch
      type: cloudwatch
      access: proxy
      jsonData:
        authType: default
        defaultRegion: us-west-2
      editable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-kubernetes
  namespace: monitoring
data:
  kubernetes-cluster.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Kubernetes Cluster Overview",
        "tags": ["kubernetes"],
        "timezone": "UTC",
        "panels": [
          {
            "title": "Cluster CPU Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "1 - (avg(irate(node_cpu_seconds_total{mode=\"idle\"}[5m])))",
                "legendFormat": "CPU Usage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percentunit",
                "min": 0,
                "max": 1
              }
            }
          },
          {
            "title": "Cluster Memory Usage",
            "type": "stat",
            "targets": [
              {
                "expr": "1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)",
                "legendFormat": "Memory Usage %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percentunit",
                "min": 0,
                "max": 1
              }
            }
          },
          {
            "title": "Pod Status",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(kube_pod_status_phase{phase=\"Running\"})",
                "legendFormat": "Running"
              },
              {
                "expr": "sum(kube_pod_status_phase{phase=\"Pending\"})",
                "legendFormat": "Pending"
              },
              {
                "expr": "sum(kube_pod_status_phase{phase=\"Failed\"})",
                "legendFormat": "Failed"
              }
            ]
          }
        ]
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-autodmca
  namespace: monitoring
data:
  autodmca-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "AutoDMCA Platform Overview",
        "tags": ["autodmca", "application"],
        "timezone": "UTC",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s",
        "panels": [
          {
            "title": "HTTP Requests Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(http_requests_total{job=\"autodmca-backend\"}[5m])) by (status)",
                "legendFormat": "{{ status }}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec"
              }
            ]
          },
          {
            "title": "Response Time Percentiles",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, rate(http_request_duration_seconds_bucket{job=\"autodmca-backend\"}[5m]))",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket{job=\"autodmca-backend\"}[5m]))",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, rate(http_request_duration_seconds_bucket{job=\"autodmca-backend\"}[5m]))",
                "legendFormat": "99th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds",
                "unit": "s"
              }
            ]
          },
          {
            "title": "Active Celery Workers",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(up{job=\"autodmca-workers\"})",
                "legendFormat": "Active Workers"
              }
            ]
          },
          {
            "title": "Task Processing Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "sum(rate(celery_tasks_total[5m])) by (queue)",
                "legendFormat": "{{ queue }}"
              }
            ],
            "yAxes": [
              {
                "label": "Tasks/sec"
              }
            ]
          },
          {
            "title": "Database Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "postgres_stat_activity_count",
                "legendFormat": "Active Connections"
              }
            ]
          },
          {
            "title": "Redis Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "redis_memory_used_bytes / redis_memory_max_bytes",
                "legendFormat": "Memory Usage %"
              }
            ],
            "yAxes": [
              {
                "unit": "percentunit",
                "min": 0,
                "max": 1
              }
            ]
          },
          {
            "title": "DMCA Takedown Success Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(dmca_takedowns_successful_total[1h]) / rate(dmca_takedowns_total[1h])",
                "legendFormat": "Success Rate"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percentunit",
                "min": 0,
                "max": 1,
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 0.7},
                    {"color": "green", "value": 0.9}
                  ]
                }
              }
            }
          },
          {
            "title": "Infringement Processing Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(infringement_processing_duration_seconds_bucket[10m]))",
                "legendFormat": "95th percentile"
              }
            ],
            "yAxes": [
              {
                "label": "Seconds",
                "unit": "s"
              }
            ]
          }
        ]
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsNonRoot: true
        runAsUser: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secret
              key: admin-password
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.autodmca.com"
        - name: GF_SMTP_ENABLED
          value: "true"
        - name: GF_SMTP_HOST
          value: "smtp.amazonaws.com:587"
        - name: GF_SMTP_USER
          valueFrom:
            secretKeyRef:
              name: smtp-secret
              key: username
        - name: GF_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: smtp-secret
              key: password
        - name: GF_SMTP_FROM_ADDRESS
          value: "alerts@autodmca.com"
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_UNIFIED_ALERTING_ENABLED
          value: "true"
        - name: GF_INSTALL_PLUGINS
          value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel"
        - name: GF_FEATURE_TOGGLES_ENABLE
          value: "ngalert"
        ports:
        - containerPort: 3000
          name: http
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: storage
          mountPath: /var/lib/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
        - name: dashboard-kubernetes
          mountPath: /var/lib/grafana/dashboards/kubernetes
        - name: dashboard-autodmca
          mountPath: /var/lib/grafana/dashboards/autodmca
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: datasources
        configMap:
          name: grafana-datasources
      - name: dashboards-config
        configMap:
          name: grafana-dashboards-config
      - name: dashboard-kubernetes
        configMap:
          name: grafana-dashboard-kubernetes
      - name: dashboard-autodmca
        configMap:
          name: grafana-dashboard-autodmca
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: grafana
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: gp3
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: monitoring
type: Opaque
stringData:
  admin-password: "CHANGE_IN_PRODUCTION"
---
apiVersion: v1
kind: Secret
metadata:
  name: smtp-secret
  namespace: monitoring
type: Opaque
stringData:
  username: "SMTP_USERNAME"
  password: "SMTP_PASSWORD"