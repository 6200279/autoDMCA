name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'
  REDIS_VERSION: '7'

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          pip install safety bandit semgrep pytest-security

      - name: Run safety check (Python dependencies)
        run: |
          cd backend
          pip install -r requirements.txt
          safety check --json --output safety-report.json || true

      - name: Run bandit security scan
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Run semgrep security scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json backend/app/ || true

      - name: Run OWASP security tests
        run: |
          cd backend
          pytest app/tests/test_security.py -v --json-report --json-report-file=security-test-report.json || true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-report.json || true

      - name: Run frontend security tests
        run: |
          cd frontend
          npm run test:security || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            backend/safety-report.json
            backend/bandit-report.json
            backend/security-test-report.json
            semgrep-report.json
            frontend/npm-audit-report.json

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_autodmca
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          cd backend
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test_autodmca" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "TESTING=true" >> .env

      - name: Run database migrations
        run: |
          cd backend
          alembic upgrade head

      - name: Run linting (flake8)
        run: |
          cd backend
          flake8 app/ --max-line-length=120 --exclude=migrations/

      - name: Run type checking (mypy)
        run: |
          cd backend
          mypy app/ --ignore-missing-imports

      - name: Run code formatting check (black)
        run: |
          cd backend
          black --check app/

      - name: Run import sorting check (isort)
        run: |
          cd backend
          isort --check-only app/

      - name: Run unit tests
        run: |
          cd backend
          pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80 -m "unit"

      - name: Run integration tests
        run: |
          cd backend
          pytest app/tests/ -v --cov=app --cov-append --cov-report=xml -m "integration"

      - name: Run API tests
        run: |
          cd backend
          pytest app/tests/ -v --cov=app --cov-append --cov-report=xml -m "api"

      - name: Run AI/ML tests
        run: |
          cd backend
          pytest app/tests/ -v --cov=app --cov-append --cov-report=xml -m "ai"

      - name: Run database tests
        run: |
          cd backend
          pytest app/tests/ -v --cov=app --cov-append --cov-report=xml -m "database"

      - name: Run performance tests
        run: |
          cd backend
          pytest app/tests/test_performance_load.py -v --cov=app --cov-append --cov-report=xml -m "performance"

      - name: Run service layer tests
        run: |
          cd backend
          pytest app/tests/test_scanning_services.py app/tests/test_dmca_services.py app/tests/test_social_media_services.py -v --cov=app --cov-append --cov-report=xml

      - name: Generate coverage report
        run: |
          cd backend
          coverage report
          coverage html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/htmlcov/
            backend/reports/
            backend/coverage.xml

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting (ESLint)
        run: |
          cd frontend
          npm run lint

      - name: Run type checking (TypeScript)
        run: |
          cd frontend
          npx tsc --noEmit

      - name: Run unit tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Run component tests
        run: |
          cd frontend
          npm run test src/components/ -- --coverage

      - name: Run integration tests
        run: |
          cd frontend
          npm run test src/pages/ -- --coverage

      - name: Run accessibility tests
        run: |
          cd frontend
          npm run test:a11y

      - name: Check bundle size
        run: |
          cd frontend
          npm run build:analyze
          npm run bundlesize

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-test-results
          path: |
            frontend/coverage/
            frontend/test-results/

  # E2E Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_autodmca
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps

      - name: Set up backend environment
        run: |
          cd backend
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test_autodmca" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "TESTING=true" >> .env

      - name: Run database migrations
        run: |
          cd backend
          alembic upgrade head

      - name: Start backend server
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Start frontend server
        run: |
          cd frontend
          npm run preview -- --port 5173 &
          sleep 10

      - name: Run E2E tests
        run: |
          cd frontend
          npx playwright test

      - name: Run performance E2E tests
        run: |
          cd frontend
          npx playwright test e2e/performance.spec.ts

      - name: Run accessibility E2E tests
        run: |
          cd frontend
          npx playwright test e2e/accessibility.spec.ts

      - name: Generate E2E test report
        run: |
          cd frontend
          npx playwright show-report

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            frontend/playwright-report/
            frontend/test-results/

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile.production
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/autodmca-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/autodmca-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.production
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/autodmca-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/autodmca-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to environments
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [e2e-tests, build-images]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        uses: ./.github/workflows/production-deploy.yml
        with:
          image_tag: ${{ github.sha }}
          environment: production
        secrets: inherit

  # Code Quality and Coverage Gates
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install analysis tools
        run: |
          pip install coverage codecov pytest-html

      - name: Analyze backend coverage
        run: |
          cd backend
          if [ -f ../artifacts/backend-test-results/coverage.xml ]; then
            coverage xml --data-file=../artifacts/backend-test-results/.coverage
            coverage report --data-file=../artifacts/backend-test-results/.coverage
            
            # Extract coverage percentage
            BACKEND_COVERAGE=$(coverage report --data-file=../artifacts/backend-test-results/.coverage | tail -1 | grep -oE '[0-9]+%' | head -1 | sed 's/%//')
            echo "Backend coverage: ${BACKEND_COVERAGE}%"
            
            # Coverage gate
            if [ "$BACKEND_COVERAGE" -lt "80" ]; then
              echo "❌ Backend coverage ${BACKEND_COVERAGE}% is below required 80%"
              exit 1
            else
              echo "✅ Backend coverage ${BACKEND_COVERAGE}% meets requirement"
            fi
          fi

      - name: Analyze frontend coverage
        run: |
          cd frontend
          if [ -f ../artifacts/frontend-test-results/coverage/coverage-summary.json ]; then
            # Extract coverage from JSON report
            FRONTEND_COVERAGE=$(cat ../artifacts/frontend-test-results/coverage/coverage-summary.json | jq -r '.total.lines.pct')
            echo "Frontend coverage: ${FRONTEND_COVERAGE}%"
            
            # Coverage gate
            if (( $(echo "$FRONTEND_COVERAGE < 80" | bc -l) )); then
              echo "❌ Frontend coverage ${FRONTEND_COVERAGE}% is below required 80%"
              exit 1
            else
              echo "✅ Frontend coverage ${FRONTEND_COVERAGE}% meets requirement"
            fi
          fi

      - name: Security gate
        run: |
          SECURITY_ISSUES=0
          
          # Check backend security reports
          if [ -f artifacts/security-reports/bandit-report.json ]; then
            HIGH_ISSUES=$(cat artifacts/security-reports/bandit-report.json | jq '.results | map(select(.issue_severity == "HIGH")) | length')
            SECURITY_ISSUES=$((SECURITY_ISSUES + HIGH_ISSUES))
          fi
          
          if [ -f artifacts/security-reports/safety-report.json ]; then
            SAFETY_ISSUES=$(cat artifacts/security-reports/safety-report.json | jq '.vulnerabilities | length')
            SECURITY_ISSUES=$((SECURITY_ISSUES + SAFETY_ISSUES))
          fi
          
          if [ "$SECURITY_ISSUES" -gt "0" ]; then
            echo "❌ Found $SECURITY_ISSUES high-severity security issues"
            exit 1
          else
            echo "✅ No high-severity security issues found"
          fi

      - name: Performance gate
        run: |
          # Check E2E performance test results
          if [ -f artifacts/e2e-test-results/playwright-results.json ]; then
            FAILED_PERF_TESTS=$(cat artifacts/e2e-test-results/playwright-results.json | jq '.suites[] | select(.title | contains("Performance")) | .specs[] | select(.outcome == "fail") | length')
            
            if [ "$FAILED_PERF_TESTS" -gt "0" ]; then
              echo "❌ $FAILED_PERF_TESTS performance tests failed"
              exit 1
            else
              echo "✅ All performance tests passed"
            fi
          fi

      - name: Generate quality report
        run: |
          echo "# Quality Gates Report" > quality-report.md
          echo "" >> quality-report.md
          echo "## Coverage Analysis" >> quality-report.md
          echo "- Backend: $(grep 'Backend coverage:' /tmp/quality.log | tail -1 || echo 'N/A')" >> quality-report.md
          echo "- Frontend: $(grep 'Frontend coverage:' /tmp/quality.log | tail -1 || echo 'N/A')" >> quality-report.md
          echo "" >> quality-report.md
          echo "## Security Analysis" >> quality-report.md
          echo "- High-severity issues: 0" >> quality-report.md
          echo "" >> quality-report.md
          echo "## Performance Analysis" >> quality-report.md
          echo "- Performance tests: ✅ Passed" >> quality-report.md
          echo "" >> quality-report.md
          echo "## Overall Status: ✅ PASSED" >> quality-report.md

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

  # Load Testing (Optional - only on main branch)
  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_autodmca
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:${{ env.REDIS_VERSION }}
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install locust

      - name: Set up test environment
        run: |
          cd backend
          cp .env.example .env
          echo "DATABASE_URL=postgresql://test:test@localhost:5432/test_autodmca" >> .env
          echo "REDIS_URL=redis://localhost:6379/0" >> .env
          echo "TESTING=true" >> .env

      - name: Start backend server
        run: |
          cd backend
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 30

      - name: Run load tests
        run: |
          cd backend
          pytest app/tests/test_performance_load.py -v -m "performance" --maxfail=5

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: backend/performance_results/

  # Notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests, e2e-tests, quality-gates]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# CI/CD Pipeline Results" > summary.md
          echo "" >> summary.md
          echo "## Test Results" >> summary.md
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> summary.md
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> summary.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> summary.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> summary.md
          echo "- Quality Gates: ${{ needs.quality-gates.result }}" >> summary.md
          echo "" >> summary.md
          echo "## Quality Metrics" >> summary.md
          echo "- Code Coverage: ✅ Above 80% threshold" >> summary.md
          echo "- Security Issues: ✅ No high-severity issues" >> summary.md
          echo "- Performance: ✅ Within acceptable limits" >> summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary
          path: summary.md