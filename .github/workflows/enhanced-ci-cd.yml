name: Enhanced CI/CD Pipeline with Advanced Deployment Strategies

on:
  push:
    branches: [main, develop, staging, feature/*]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # Security scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Secret scanning with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      # Code quality checks
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install bandit safety black isort flake8 mypy

      - name: Python security analysis with Bandit
        run: |
          cd backend
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Python dependency check with Safety
        run: |
          cd backend
          safety check --json --output safety-report.json || true

      - name: Code formatting check (Black)
        run: |
          cd backend
          black --check --diff app/

      - name: Import sorting check (isort)
        run: |
          cd backend
          isort --check-only --diff app/

      - name: Linting with flake8
        run: |
          cd backend
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app/ --count --exit-zero --max-complexity=12 --max-line-length=127 --statistics

      - name: Type checking with mypy
        run: |
          cd backend
          mypy app/ --ignore-missing-imports --strict

      # Frontend quality checks
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Frontend type checking
        run: |
          cd frontend
          npm run type-check

      - name: Frontend security audit
        run: |
          cd frontend
          npm audit --audit-level high

  # Testing with comprehensive coverage
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender1

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock pytest-xdist coverage[toml]

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          cd backend
          alembic upgrade head

      - name: Run unit tests with coverage
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          cd backend
          pytest tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term \
            --cov-fail-under=80 \
            -v \
            -x \
            --tb=short \
            -n auto

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run unit tests with coverage
        run: |
          cd frontend
          npm run test:coverage

      - name: Run e2e tests
        run: |
          cd frontend
          npm run test:e2e:ci

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

  # Build and security scan
  build:
    name: Build & Scan Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' || github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend build
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_ENV=production

      # Frontend build
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NODE_ENV=production
            VITE_API_URL=${{ vars.VITE_API_URL }}
            VITE_WS_URL=${{ vars.VITE_WS_URL }}

      # Container security scanning
      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.backend-meta.outputs.tags }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Upload backend scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.frontend-meta.outputs.tags }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload frontend scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'

  # Deploy to staging with smoke tests
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    concurrency:
      group: staging-deployment
      cancel-in-progress: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install tools
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME_STAGING }}

      - name: Deploy to staging
        run: |
          # Update image tags in manifests
          find k8s/staging -name "*.yaml" -exec sed -i "s|IMAGE_TAG_BACKEND|${{ needs.build.outputs.backend-image }}|g" {} \;
          find k8s/staging -name "*.yaml" -exec sed -i "s|IMAGE_TAG_FRONTEND|${{ needs.build.outputs.frontend-image }}|g" {} \;
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/ --record
          
          # Wait for rollout to complete
          kubectl rollout status deployment/backend-staging -n staging --timeout=600s
          kubectl rollout status deployment/frontend-staging -n staging --timeout=600s

      - name: Run comprehensive smoke tests
        run: |
          # Get service endpoints
          STAGING_URL=$(kubectl get ingress staging-ingress -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Health checks
          ./scripts/staging-health-check.sh "https://${STAGING_URL}"
          
          # API integration tests
          ./scripts/api-integration-tests.sh "https://${STAGING_URL}"

  # Production deployment with advanced strategies
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: (github.event_name == 'release' && github.event.action == 'published') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install tools
        run: |
          curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME_PROD }}

      - name: Pre-deployment validation
        run: |
          # Validate cluster health
          kubectl cluster-info
          kubectl get nodes
          
          # Check resource availability
          kubectl top nodes
          kubectl describe quota -n production
          
          # Validate secrets and configs
          kubectl get secrets -n production
          kubectl get configmaps -n production

      - name: Create deployment backup
        run: |
          # Backup current state
          kubectl get all -n production -o yaml > production-backup-$(date +%s).yaml
          aws s3 cp production-backup-*.yaml s3://${{ vars.BACKUP_BUCKET }}/deployments/

      - name: Deploy with blue-green strategy
        run: |
          ./scripts/blue-green-deployment.sh \
            --backend-image "${{ needs.build.outputs.backend-image }}" \
            --frontend-image "${{ needs.build.outputs.frontend-image }}" \
            --namespace production \
            --timeout 900

      - name: Run production validation tests
        run: |
          ./scripts/production-validation.sh

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚀 Production deployment completed successfully!
            
            **Release:** ${{ github.event.release.tag_name || github.sha }}
            **Deployed by:** ${{ github.actor }}
            **Images:**
            • Backend: `${{ needs.build.outputs.backend-image }}`
            • Frontend: `${{ needs.build.outputs.frontend-image }}`
        if: success()

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Production deployment failed, initiating rollback..."
          ./scripts/rollback-production.sh
          
          # Notify failure
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ Production deployment failed and was rolled back automatically!"}' \
            ${{ secrets.SLACK_WEBHOOK }}

  # Performance and load testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          STAGING_URL="https://staging.autodmca.com"
          k6 run \
            --env STAGING_URL="$STAGING_URL" \
            --out json=performance-results.json \
            tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: performance-results.json

      - name: Analyze performance metrics
        run: |
          ./scripts/analyze-performance.sh performance-results.json

  # Cleanup and maintenance
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    steps:
      - name: Clean up old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-backend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

      - name: Clean up staging resources
        if: github.ref == 'refs/heads/staging'
        run: |
          # Clean up old staging deployments
          echo "Cleaning up staging resources..."
          # Add cleanup logic here