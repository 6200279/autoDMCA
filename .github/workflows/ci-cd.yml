name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Security scanning and dependency checks
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Backend testing and linting
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [security]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libgl1-mesa-glx libglib2.0-0

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements-updated.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy

      - name: Lint with flake8
        run: |
          cd backend
          flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Format check with black
        run: |
          cd backend
          black --check app

      - name: Type check with mypy
        run: |
          cd backend
          mypy app --ignore-missing-imports

      - name: Run tests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key
        run: |
          cd backend
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # Frontend testing and linting
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint with ESLint
        run: |
          cd frontend
          npm run lint

      - name: Type check
        run: |
          cd frontend
          npm run type-check

      - name: Run tests
        run: |
          cd frontend
          npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage

  # Build and push Docker images
  build:
    name: Build Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
      backend-digest: ${{ steps.backend-build.outputs.digest }}
      frontend-digest: ${{ steps.frontend-build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend image
      - name: Extract backend metadata
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        id: backend-build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Frontend image
      - name: Extract frontend metadata
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push frontend image
        id: frontend-build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Container security scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner on backend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.backend-image }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      - name: Upload backend scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'backend-trivy-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.frontend-image }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      - name: Upload frontend scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'frontend-trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME_STAGING }}

      - name: Deploy to staging
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG_BACKEND|${{ needs.build.outputs.backend-image }}|g" k8s/staging/backend-deployment.yaml
          sed -i "s|IMAGE_TAG_FRONTEND|${{ needs.build.outputs.frontend-image }}|g" k8s/staging/frontend-deployment.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f k8s/staging/ --record
          
          # Wait for rollout to complete
          kubectl rollout status deployment/backend-staging -n staging --timeout=600s
          kubectl rollout status deployment/frontend-staging -n staging --timeout=600s
          kubectl rollout status deployment/worker-staging -n staging --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Get load balancer URL
          STAGING_URL=$(kubectl get ingress staging-ingress -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run health checks
          curl -f "https://${STAGING_URL}/health" || exit 1
          curl -f "https://${STAGING_URL}/api/v1/health" || exit 1

      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, container-scan]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME_PROD }}

      # Blue-Green deployment strategy
      - name: Deploy to production (Blue-Green)
        run: |
          # Create new deployment with green suffix
          sed -i "s|IMAGE_TAG_BACKEND|${{ needs.build.outputs.backend-image }}|g" k8s/production/backend-deployment.yaml
          sed -i "s|IMAGE_TAG_FRONTEND|${{ needs.build.outputs.frontend-image }}|g" k8s/production/frontend-deployment.yaml
          sed -i "s|backend-prod|backend-prod-green|g" k8s/production/backend-deployment.yaml
          sed -i "s|frontend-prod|frontend-prod-green|g" k8s/production/frontend-deployment.yaml
          
          # Deploy green environment
          kubectl apply -f k8s/production/ --record
          
          # Wait for green deployment to be ready
          kubectl rollout status deployment/backend-prod-green -n production --timeout=600s
          kubectl rollout status deployment/frontend-prod-green -n production --timeout=600s
          kubectl rollout status deployment/worker-prod-green -n production --timeout=600s

      - name: Run production health checks
        run: |
          # Get green service endpoint
          GREEN_URL=$(kubectl get service backend-prod-green -n production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          # Run comprehensive health checks
          ./scripts/health-check.sh "https://${GREEN_URL}"

      - name: Switch traffic to green
        run: |
          # Update service selectors to point to green deployment
          kubectl patch service backend-prod -n production -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service frontend-prod -n production -p '{"spec":{"selector":{"version":"green"}}}'

      - name: Monitor deployment
        run: |
          # Monitor error rates and response times for 5 minutes
          ./scripts/monitor-deployment.sh 300

      - name: Clean up blue deployment
        run: |
          # Delete old blue deployment
          kubectl delete deployment backend-prod-blue -n production --ignore-not-found=true
          kubectl delete deployment frontend-prod-blue -n production --ignore-not-found=true
          kubectl delete deployment worker-prod-blue -n production --ignore-not-found=true

      - name: Update deployment tags
        run: |
          # Tag successful deployment
          git tag -a "deployed-$(date +%Y%m%d-%H%M%S)" -m "Deployed to production"
          git push origin --tags

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "🚀 Production deployment completed: ${{ github.event.release.tag_name }}"
        if: always()

  # Database migrations
  migrate:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging' || github.event_name == 'release'
    environment: ${{ github.ref == 'refs/heads/staging' && 'staging' || 'production' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Run database migrations
        run: |
          # Get RDS endpoint
          DB_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier ${{ vars.RDS_INSTANCE_ID }} --query 'DBInstances[0].Endpoint.Address' --output text)
          
          # Run Alembic migrations
          kubectl run migration-job-$(date +%s) \
            --image=${{ needs.build.outputs.backend-image }} \
            --env="DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${DB_ENDPOINT}:5432/${{ vars.DB_NAME }}" \
            --restart=Never \
            --command -- alembic upgrade head

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run performance tests
        run: |
          STAGING_URL=$(kubectl get ingress staging-ingress -n staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          k6 run --env STAGING_URL="https://${STAGING_URL}" tests/performance/load-test.js

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: results/

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, performance-test]
    if: always()
    steps:
      - name: Clean up Docker images
        run: |
          # Clean up old images to save space
          docker system prune -f --volumes

      - name: Clean up GitHub packages
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}-backend
          package-type: container
          min-versions-to-keep: 10
          delete-only-untagged-versions: true