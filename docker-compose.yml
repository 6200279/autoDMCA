# Development Docker Compose configuration
version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: content_protection_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-contentprotection}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
      POSTGRES_DB: ${POSTGRES_DB:-content_protection}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-contentprotection}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: content_protection_redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_ENV: development
    container_name: content_protection_backend
    environment:
      - BUILD_ENV=development
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-contentprotection}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-content_protection}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend}
      - DEBUG=${DEBUG:-True}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
    volumes:
      - ./backend:/app:delegated
      - uploads:/app/uploads
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_ENV: development
    container_name: content_protection_worker
    environment:
      - BUILD_ENV=development
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-contentprotection}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-content_protection}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - C_FORCE_ROOT=1
    volumes:
      - ./backend:/app:delegated
      - uploads:/app/uploads
      - worker_logs:/app/logs
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A app.core.celery worker --loglevel=info --concurrency=2 --pool=prefork
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_ENV: development
    container_name: content_protection_beat
    environment:
      - BUILD_ENV=development
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-contentprotection}:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/${POSTGRES_DB:-content_protection}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - C_FORCE_ROOT=1
    volumes:
      - ./backend:/app:delegated
      - beat_logs:/app/logs
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: celery -A app.core.celery beat --loglevel=info --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend (Development mode)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: builder
      args:
        NODE_ENV: development
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000/api/v1}
        VITE_WS_URL: ${VITE_WS_URL:-ws://localhost:8000/ws}
    container_name: content_protection_frontend
    environment:
      - NODE_ENV=development
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000/api/v1}
      - VITE_WS_URL=${VITE_WS_URL:-ws://localhost:8000/ws}
      - HOST=0.0.0.0
    volumes:
      - ./frontend:/app:delegated
      - /app/node_modules
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - app-network
    depends_on:
      - backend
    command: npm run dev
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy (Optional for development)
  nginx:
    image: nginx:alpine
    container_name: content_protection_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - app-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - with-proxy

  # Monitoring and observability (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: content_protection_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: content_protection_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - app-network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads:
    driver: local
  backend_logs:
    driver: local
  worker_logs:
    driver: local
  beat_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16