# Secure nginx configuration for Content Protection Platform
# Based on OWASP security guidelines and best practices

user nginx;
worker_processes auto;
pid /var/run/nginx.pid;

# Security: Limit worker connections
events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    # Security: Basic hardening
    server_tokens off;  # Hide nginx version
    more_clear_headers Server;  # Remove server header (if using nginx-extras)
    
    # Security: Request limits
    client_max_body_size 50M;
    client_body_buffer_size 16K;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 16k;
    client_body_timeout 60s;
    client_header_timeout 60s;
    keepalive_timeout 65s;
    send_timeout 60s;
    
    # Security: Rate limiting
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=1r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Security: Logging configuration
    log_format security_log '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           '$request_time $upstream_response_time '
                           '"$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log security_log;
    error_log /var/log/nginx/error.log warn;
    
    # Security: MIME type protection
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Security: SSL/TLS Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1h;
    ssl_session_tickets off;
    
    # Security: OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # Security: DH Parameters
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security: Hide sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Security: Upstream configuration
    upstream backend {
        least_conn;
        server backend:8000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Security: Main server block (HTTPS)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.yourdomain.com yourdomain.com;
        
        # SSL Certificate paths
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;
        
        # Security headers
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), gyroscope=(), magnetometer=(), payment=(), usb=()" always;
        add_header Cross-Origin-Embedder-Policy "require-corp" always;
        add_header Cross-Origin-Opener-Policy "same-origin" always;
        add_header Cross-Origin-Resource-Policy "same-site" always;
        
        # Content Security Policy
        add_header Content-Security-Policy "
            default-src 'self';
            script-src 'self' 'unsafe-inline' https://js.stripe.com https://checkout.stripe.com;
            style-src 'self' 'unsafe-inline' https://fonts.googleapis.com;
            img-src 'self' data: https: blob:;
            font-src 'self' data: https://fonts.gstatic.com;
            connect-src 'self' wss: https://api.stripe.com;
            media-src 'self' data: https:;
            object-src 'none';
            child-src 'none';
            frame-src https://js.stripe.com https://checkout.stripe.com;
            frame-ancestors 'none';
            form-action 'self';
            base-uri 'self';
            manifest-src 'self';
        " always;
        
        # Security: Connection limits
        limit_conn conn_limit_per_ip 20;
        
        # Security: API endpoints with rate limiting
        location /api/v1/auth/login {
            limit_req zone=login burst=3 nodelay;
            proxy_pass http://backend;
            include /etc/nginx/proxy_params;
        }
        
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend;
            include /etc/nginx/proxy_params;
            
            # Security: Additional API protections
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            
            # Security: Request validation
            if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|OPTIONS)$) {
                return 405;
            }
        }
        
        # Frontend static files
        location / {
            limit_req zone=general burst=10 nodelay;
            proxy_pass http://frontend:80;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # WebSocket support
        location /ws {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://backend;
            access_log off;
        }
        
        # Security: File upload restrictions
        location /api/v1/upload {
            limit_req zone=api burst=5 nodelay;
            client_max_body_size 10M;
            
            # Security: Validate file types
            location ~ \.(exe|bat|cmd|scr|vbs|js|jar|com|pif|php|asp|jsp)$ {
                deny all;
            }
            
            proxy_pass http://backend;
            include /etc/nginx/proxy_params;
        }
        
        # Security: Admin panel protection
        location /admin {
            # IP whitelist for admin access (example)
            # allow 192.168.1.0/24;
            # deny all;
            
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://backend;
            include /etc/nginx/proxy_params;
            
            # Additional authentication headers
            proxy_set_header X-Admin-Access "true";
        }
        
        # Security: Error pages
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 /error.html;
        error_page 500 501 502 503 504 505 506 507 508 510 511 /error.html;
        
        location = /error.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
    
    # Security: HTTP to HTTPS redirect
    server {
        listen 80;
        listen [::]:80;
        server_name api.yourdomain.com yourdomain.com;
        
        # Security: Redirect all HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    # Security: Default server block (catch invalid hosts)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;
        
        # Use self-signed certificate for default server
        ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        
        server_name _;
        
        # Security: Drop connections with invalid hosts
        return 444;
    }
}

# Security: Additional configurations
include /etc/nginx/conf.d/*.conf;